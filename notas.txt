1. HomeDir
	- não é thread-safe. Não há garantias que uma chamada para setPath feita por uma thread t0 seja visto por uma thread t1, mesmo que t1 faça seu trabalho após a execução de setPath por t0.
	- Uma opção é syncronizar os métodos associados. Ou então ter a variável path declarada como volalite. Uma terceira opção é não ter um método setPath, e ao invés disso, ter dois métodos getInstance, um com args e outro sem (que pode parecer estranho)

2. PluginInstantiationService
	- na linha String path = homeDir.getPath() + File.pathSeparator, acredito que deveria ser usado o File.separator
	- codigo e vars não usadas

3. CloudPluginsHolder
	- a linha "this.imagePlugin = imagePlugin;" é inefetiva. acredito que é um TODO
	- tanto a classe CloudPluginsHolder quanto BehaviorPluginsHolder não são thread-safe. Eu acredito que elas não serão usadas diretamente por múltiplas threads. Mas, caso seja, temos problemas. Acredito que as variáveis de instância deveria ser declaradas final (essa é uma boa prática, quando possível seguir)

4. PropertiesHolder
	- me parece que deveriamos usar "File.separator" ao invés pathSeparator em "String path = homeDir.getPath() + File.pathSeparator;"
	- código não usado

5. PropertiesUtil
	- na linha 42 temos um log fatal mas não temos um System.exit
	- o bloco de código executado no catch (FileNotFoundException e) é mais complicado do que o necessário. sugiro colocar um TODO para refatoramos de maneira que tenhamos um outro método que faz o parse de um filename por vez. Com isso, não será necessário fazer parse da mensagem da exception. Isso é ruim primeiro pq o código está díficil de entender, segundo, porque a mensagem de exceção não é um contrato, pode mudar a qualquer momento.
